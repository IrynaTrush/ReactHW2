{"version":3,"sources":["components/contact/index.js","components/Contracts/index.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","key","this","props","firstName","gender","lastName","phone","Component","Contracts","state","contacts","search","searchHandler","e","setState","target","value","contact","map","i","a","filter","item","toLowerCase","includes","length","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAEqBA,G,6KAEb,OACI,yBAAKC,UAAU,cAAcC,IAAKC,KAAKC,MAAMC,UAAY,GACzD,yBAAKJ,UAAU,cAAcC,IAAKC,KAAKC,MAAMC,UAAY,GAA0B,SAAtBF,KAAKC,MAAME,OAAoB,uBAAGL,UAAU,gBAAqB,uBAAGA,UAAU,kBAC3I,yBAAKA,UAAU,cAAcC,IAAKC,KAAKC,MAAMC,UAAY,GACzD,uBAAGJ,UAAU,cAAcC,IAAKC,KAAKC,MAAMC,UAAY,GAAG,0BAAMJ,UAAU,eAAhB,eAAiDE,KAAKC,MAAMC,WACtH,uBAAGJ,UAAU,cAAcC,IAAKC,KAAKC,MAAMG,SAAW,GAAG,0BAAMN,UAAU,eAAhB,cAAgDE,KAAKC,MAAMG,UACpH,uBAAGN,UAAU,cAAcC,IAAKC,KAAKC,MAAMI,MAAQ,GAAG,0BAAMP,UAAU,eAAhB,UAA4CE,KAAKC,MAAMI,a,GARpFC,cCEhBC,E,4MACrBC,MAAQ,CACJC,SAAU,CAAC,CACPP,UAAW,uCACXE,SAAU,qEACVC,MAAO,gBACPF,OAAQ,QACT,CACCD,UAAW,iCACXE,SAAU,+DACVC,MAAO,gBACPF,OAAQ,UACT,CACCD,UAAW,6CACXE,SAAU,GACVC,MAAO,iBACR,CACCH,UAAW,iCACXE,SAAU,mDACVC,MAAO,gBACPF,OAAQ,UACT,CACCD,UAAW,uCACXE,SAAU,yDACVC,MAAO,gBACPF,OAAQ,QACT,CACCD,UAAW,uCACXE,SAAU,6CACVC,MAAO,gBACPF,OAAQ,SAGZO,OAAQ,I,EAGZC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVH,OAAQE,EAAEE,OAAOC,S,uDAIf,IAAD,OACDC,EAAU,KACjBA,EAAUhB,KAAKQ,MAAMC,SAASQ,KAAI,SAAAC,GAAC,OAC5B,kBAAC,EAAD,CACQhB,UAAWgB,EAAEhB,UACbE,SAAUc,EAAEd,SACZC,MAAOa,EAAEb,MACTF,OAAQe,EAAEf,YAItB,IAAMgB,EAAInB,KAAKQ,MAAMC,SAASW,QAAO,SAAAC,GACnC,IAAMX,EAAS,EAAKF,MAAME,OAAOY,cACjC,OAAOD,EAAKnB,UAAUoB,cAAcC,SAASb,IAC7CW,EAAKjB,SAASkB,cAAcC,SAASb,IACrCW,EAAKhB,MAAMkB,SAASb,MAiBlB,MAdsB,KAAtBV,KAAKQ,MAAME,SACPM,EAAUG,EAAEF,KAAI,SAAAC,GAAC,OACb,kBAAC,EAAD,CACAhB,UAAWgB,EAAEhB,UACbE,SAAUc,EAAEd,SACZC,MAAOa,EAAEb,MACTF,OAAQe,EAAEf,aAKL,IAAbgB,EAAEK,SACFR,EAAU,yBAAKlB,UAAU,eAAf,0BAGN,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,UACX,uBAAGA,UAAU,uBACb,2BAAOA,UAAU,cAAc2B,SAAUzB,KAAKW,iBAEjDK,O,GAhFsBV,aCaxBoB,G,6KAVX,OACE,yBAAK5B,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,Y,GALQQ,cCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f6b12f0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Contact extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"contactItem\" key={this.props.firstName + 2}>\r\n            <div className=\"contactIcon\" key={this.props.firstName + 3}>{this.props.gender === \"male\" ? <i className=\"fas fa-mars\"></i> : <i className=\"fas fa-venus\"></i>}</div>\r\n            <div className=\"contactInfo\" key={this.props.firstName + 4}>\r\n            <p className=\"contactText\" key={this.props.firstName + 1}><span className=\"contactSpan\">First Name:</span>{this.props.firstName}</p>\r\n            <p className=\"contactText\" key={this.props.lastName + 1}><span className=\"contactSpan\">Last Name:</span>{this.props.lastName}</p>\r\n            <p className=\"contactText\" key={this.props.phone + 1}><span className=\"contactSpan\">Phone:</span>{this.props.phone}</p>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport '../Contracts/style.css';\r\nimport Contact from \"../contact\"\r\n\r\nexport default class Contracts extends Component {\r\nstate = {\r\n    contacts: [{\r\n        firstName: \"Барней\",\r\n        lastName: \"Стинсовский\",\r\n        phone: \"+380956319521\",\r\n        gender: \"male\"\r\n    }, {\r\n        firstName: \"Робин\",\r\n        lastName: \"Щербатская\",\r\n        phone: \"+380931460123\",\r\n        gender: \"female\"\r\n    }, {\r\n        firstName: \"Аномный\",\r\n        lastName: \"\",\r\n        phone: \"+380666666666\"\r\n    }, {\r\n        firstName: \"Лилия\",\r\n        lastName: \"Олдровна\",\r\n        phone: \"+380504691254\",\r\n        gender: \"female\"\r\n    }, {\r\n        firstName: \"Маршэн\",\r\n        lastName: \"Эриксонян\",\r\n        phone: \"+380739432123\",\r\n        gender: \"male\"\r\n    }, {\r\n        firstName: \"Теодор\",\r\n        lastName: \"Мотсбэс\",\r\n        phone: \"+380956319521\",\r\n        gender: \"male\"\r\n    }],\r\n    \r\n    search: '',\r\n}\r\n\r\nsearchHandler = (e) => {\r\n    this.setState({\r\n        search: e.target.value\r\n    })\r\n    \r\n}\r\nrender() {\r\n    let contact = null;\r\n contact = this.state.contacts.map(i => \r\n        <Contact\r\n                firstName={i.firstName}\r\n                lastName={i.lastName}\r\n                phone={i.phone}\r\n                gender={i.gender}\r\n                />\r\n    )\r\n    \r\n    const a = this.state.contacts.filter(item => {\r\n      const search = this.state.search.toLowerCase();\r\n      return item.firstName.toLowerCase().includes(search) || \r\n      item.lastName.toLowerCase().includes(search) || \r\n      item.phone.includes(search)\r\n    })\r\n       \r\n    if (this.state.search !== '') {\r\n            contact = a.map(i => \r\n                <Contact\r\n                firstName={i.firstName}\r\n                lastName={i.lastName}\r\n                phone={i.phone}\r\n                gender={i.gender}\r\n                />\r\n            )\r\n    }\r\n\r\n    if (a.length === 0) {\r\n        contact = <div className=\"noAvailable\">No available contacts</div>\r\n    }\r\n        return(\r\n            <div className=\"contactWrapper\">\r\n                <div className=\"search\">\r\n                    <i className=\"fas fa-search icon\"></i>\r\n                    <input className=\"searchInput\" onChange={this.searchHandler}/>\r\n                </div>\r\n                {contact}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport Contracts from \"./components/Contracts\";\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return(\n      <div className=\"main\">\n        <div className=\"contactsList\">\n          <Contracts/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}